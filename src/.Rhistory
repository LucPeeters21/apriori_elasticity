min_transactions <- 50  # Minimum number of transactions per day
max_transactions <- 150 # Maximum number of transactions per day
# Generate random number of transactions per day
num_transactions <- sample(min_transactions:max_transactions, length(dates), replace = TRUE)
# generate transaction data
transaction_data <- data.frame(
Date = rep(dates, num_transactions),  # Random transactions per day
Transaction_ID = 1:(sum(num_transactions)),      # Unique transaction IDs
Q_A = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product A (0 to 1)
Q_B = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product B (0 to 1)
Q_C = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product C (0 to 1)
Q_D = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product D (0 to 1)
Q_E = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product E (0 to 1)
Q_F = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product F (0 to 1)
Quarter = quarter(rep(dates, num_transactions)),           # Quarter of the year
DayOfWeek = weekdays(rep(dates, num_transactions))          # Day of the week
)
# Create a basket column based on product frequency in each transaction
transaction_data$Basket <- apply(transaction_data[, c("Q_A", "Q_B", "Q_C", "Q_D", "Q_E", "Q_F")], 1, function(x) {
products <- c(rep("A", x["Q_A"]), rep("B", x["Q_B"]), rep("C", x["Q_C"]), rep("D", x["Q_D"]), rep("E", x["Q_E"]), rep("F", x["Q_F"]))
paste(products, collapse = "")
})
# Remove trailing whitespace from the 'basket' column
transaction_data$Basket <- gsub("\\s", "", transaction_data$Basket)
#### generate price data ####
price_data <- data.frame(
Date = dates,                                                # Dates for the whole year
P_A = sample(8:12, length(dates), replace = TRUE),      # Random prices for Product A (8 to 12)
P_B = sample(18:22, length(dates), replace = TRUE),     # Random prices for Product B (18 to 22)
P_C = sample(13:17, length(dates), replace = TRUE),      # Random prices for Product C (13 to 17)
P_D = sample(9:12, length(dates), replace = TRUE),      # Random prices for Product A (9 to 12)
P_E = sample(15:16, length(dates), replace = TRUE),     # Random prices for Product B (15 to 16)
P_F = sample(11:13, length(dates), replace = TRUE),      # Random prices for Product C (11 to 13)
Quarter = quarter(dates),                                    # Quarter of the year
DayOfWeek = weekdays(dates)                                  # Day of the week
)
# Add the total amount spent to the transaction data
merged_data <- merge(transaction_data, price_data, by = "Date", all.x = TRUE)
merged_data$TotalAmountSpent <- (merged_data$Q_A * merged_data$P_A) +
(merged_data$Q_B * merged_data$P_B) +
(merged_data$Q_C * merged_data$P_C) +
(merged_data$Q_D * merged_data$P_D) +
(merged_data$Q_E * merged_data$P_E) +
(merged_data$Q_F * merged_data$P_F)
transaction_data$TotalAmountSpent <- merged_data$TotalAmountSpent
# Add the total demand per product per day to the price data
sales_per_day <- aggregate(cbind(Q_A, Q_B, Q_C, Q_D, Q_E, Q_F) ~ Date, data = transaction_data, sum)
price_data <- merge(price_data, sales_per_day, by = "Date", all.x = TRUE)
price_data <- price_data %>% select(Date, DayOfWeek, Quarter, P_A, Q_A, P_B, Q_B, P_C, Q_C, P_D, Q_D, P_E, Q_E, P_F, Q_F)
# remove sales_per_day and merged_data
rm(sales_per_day, merged_data)
# import libraries
library(dplyr)
library(arules)
library(lubridate)
library(ggplot2)
#####################
## data generation ##
#####################
# Create a sequence of dates for the whole year
dates <- seq(as.Date("2018-01-01"), as.Date(Sys.time()), by = "day")
#### generate transaction data ####
# Define the interval for the random number of transactions per day
min_transactions <- 50  # Minimum number of transactions per day
max_transactions <- 150 # Maximum number of transactions per day
# Generate random number of transactions per day
num_transactions <- sample(min_transactions:max_transactions, length(dates), replace = TRUE)
# generate transaction data
transaction_data <- data.frame(
Date = rep(dates, num_transactions),  # Random transactions per day
Transaction_ID = 1:(sum(num_transactions)),      # Unique transaction IDs
Q_A = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product A (0 to 1)
Q_B = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product B (0 to 1)
Q_C = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product C (0 to 1)
Q_D = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product D (0 to 1)
Q_E = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product E (0 to 1)
Q_F = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product F (0 to 1)
Quarter = quarter(rep(dates, num_transactions)),           # Quarter of the year
DayOfWeek = weekdays(rep(dates, num_transactions))          # Day of the week
)
# Create a basket column based on product frequency in each transaction
transaction_data$Basket <- apply(transaction_data[, c("Q_A", "Q_B", "Q_C", "Q_D", "Q_E", "Q_F")], 1, function(x) {
products <- c(rep("A", x["Q_A"]), rep("B", x["Q_B"]), rep("C", x["Q_C"]), rep("D", x["Q_D"]), rep("E", x["Q_E"]), rep("F", x["Q_F"]))
paste(products, collapse = "")
})
# Remove trailing whitespace from the 'basket' column
transaction_data$Basket <- gsub("\\s", "", transaction_data$Basket)
#### generate price data ####
price_data <- data.frame(
Date = dates,                                                # Dates for the whole year
P_A = sample(8:12, length(dates), replace = TRUE),      # Random prices for Product A (8 to 12)
P_B = sample(18:22, length(dates), replace = TRUE),     # Random prices for Product B (18 to 22)
P_C = sample(13:17, length(dates), replace = TRUE),      # Random prices for Product C (13 to 17)
P_D = sample(9:12, length(dates), replace = TRUE),      # Random prices for Product A (9 to 12)
P_E = sample(15:16, length(dates), replace = TRUE),     # Random prices for Product B (15 to 16)
P_F = sample(11:13, length(dates), replace = TRUE),      # Random prices for Product C (11 to 13)
Quarter = quarter(dates),                                    # Quarter of the year
DayOfWeek = weekdays(dates)                                  # Day of the week
)
# Add the total amount spent to the transaction data
merged_data <- merge(transaction_data, price_data, by = "Date", all.x = TRUE)
merged_data$TotalAmountSpent <- (merged_data$Q_A * merged_data$P_A) +
(merged_data$Q_B * merged_data$P_B) +
(merged_data$Q_C * merged_data$P_C) +
(merged_data$Q_D * merged_data$P_D) +
(merged_data$Q_E * merged_data$P_E) +
(merged_data$Q_F * merged_data$P_F)
transaction_data$TotalAmountSpent <- merged_data$TotalAmountSpent
# Add the total demand per product per day to the price data
sales_per_day <- aggregate(cbind(Q_A, Q_B, Q_C, Q_D, Q_E, Q_F) ~ Date, data = transaction_data, sum)
price_data <- merge(price_data, sales_per_day, by = "Date", all.x = TRUE)
price_data <- price_data %>% select(Date, DayOfWeek, Quarter, P_A, Q_A, P_B, Q_B, P_C, Q_C, P_D, Q_D, P_E, Q_E, P_F, Q_F)
# remove sales_per_day and merged_data
rm(sales_per_day, merged_data)
View(price_data)
# Create the time series plot
ggplot(price_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1) +
geom_line(aes(y = Q_A, color = "Product A Demand"), size = 1) +
geom_line(aes(y = P_B, color = "Product B Price"), size = 1) +
geom_line(aes(y = Q_B, color = "Product B Demand"), size = 1) +
geom_line(aes(y = P_C, color = "Product C Price"), size = 1) +
geom_line(aes(y = Q_C, color = "Product C Demand"), size = 1) +
geom_line(aes(y = P_D, color = "Product D Price"), size = 1) +
geom_line(aes(y = Q_D, color = "Product D Demand"), size = 1) +
geom_line(aes(y = P_E, color = "Product E Price"), size = 1) +
geom_line(aes(y = Q_E, color = "Product E Demand"), size = 1) +
geom_line(aes(y = P_F, color = "Product F Price"), size = 1) +
geom_line(aes(y = Q_F, color = "Product F Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred",
"Product B Price" = "blue", "Product B Demand" = "darkblue",
"Product C Price" = "green", "Product C Demand" = "darkgreen",
"Product D Price" = "purple", "Product D Demand" = "darkpurple",
"Product E Price" = "orange", "Product E Demand" = "darkorange",
"Product F Price" = "brown", "Product F Demand" = "darkbrown")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Price and Demand Time Series",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Create the time series plot for Product A
ggplot(price_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1) +
geom_line(aes(y = Q_A, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Product A Price and Demand Time Series",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Calculate monthly averages for Product A price and demand
monthly_avg_data <- price_data %>%
mutate(YearMonth = format(Date, "%Y-%m")) %>%
group_by(YearMonth) %>%
summarise(Avg_Price = mean(P_A),
Avg_Demand = mean(Q_A))
# Create the time series plot for monthly averages of Product A
ggplot(monthly_avg_data, aes(x = as.Date(YearMonth), group = 1)) +
geom_line(aes(y = Avg_Price, color = "Product A Price"), size = 1) +
geom_line(aes(y = Avg_Demand, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Monthly Averages of Product A Price and Demand",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Calculate monthly averages for Product A price and demand
monthly_avg_data <- price_data %>%
mutate(YearMonth = format(as.Date(Date), "%Y-%m")) %>%
group_by(YearMonth) %>%
summarise(Avg_Price = mean(P_A),
Avg_Demand = mean(Q_A))
# Create the time series plot for monthly averages of Product A
ggplot(monthly_avg_data, aes(x = as.Date(YearMonth), group = 1)) +
geom_line(aes(y = Avg_Price, color = "Product A Price"), size = 1) +
geom_line(aes(y = Avg_Demand, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Monthly Averages of Product A Price and Demand",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Create the time series plot for Product A
ggplot(price_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1) +
geom_line(aes(y = Q_A, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Product A Price and Demand Time Series",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Filter price_data for the last year
last_year_data <- price_data[price_data$Year == max(price_data$Year) - 1, ]
# Create the time series plot for Product A price and demand for the last year
ggplot(last_year_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1) +
geom_line(aes(y = Q_A, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Product A Price and Demand in the Last Year",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Create the time series plot for Product A
ggplot(price_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1) +
geom_line(aes(y = Q_A, color = "Product A Demand"), size = 1) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~., name = "Demand")) +
labs(title = "Product A Price and Demand Time Series",
x = "Date",
y = "Price and Demand") +
theme_minimal()
# Create the time series plot for Product A with better formatting
ggplot(price_demand_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1, show.legend = TRUE) +
geom_point(aes(y = P_A), color = "red", size = 2, show.legend = FALSE) +
geom_line(aes(y = Q_A * 10, color = "Product A Demand (scaled)"), size = 1, show.legend = TRUE) +
geom_point(aes(y = Q_A * 10), color = "darkred", size = 2, show.legend = FALSE) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand (scaled)" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~./10, name = "Demand (scaled)", labels = scales::number_format(scale = 0.1))) +
labs(title = "Product A Price and Demand Over the Years",
x = "Date",
y = "Price and Demand") +
theme_minimal() +
theme(panel.grid.major = element_line(color = "lightgray", linetype = "dotted"))
# Create the time series plot for Product A with better formatting
ggplot(transaction_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1, show.legend = TRUE) +
geom_point(aes(y = P_A), color = "red", size = 2, show.legend = FALSE) +
geom_line(aes(y = Q_A * 10, color = "Product A Demand (scaled)"), size = 1, show.legend = TRUE) +
geom_point(aes(y = Q_A * 10), color = "darkred", size = 2, show.legend = FALSE) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand (scaled)" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~./10, name = "Demand (scaled)", labels = scales::number_format(scale = 0.1))) +
labs(title = "Product A Price and Demand Over the Years",
x = "Date",
y = "Price and Demand") +
theme_minimal() +
theme(panel.grid.major = element_line(color = "lightgray", linetype = "dotted"))
View(price_data)
# Create the time series plot for Product A with better formatting
ggplot(price_data, aes(x = Date)) +
geom_line(aes(y = P_A, color = "Product A Price"), size = 1, show.legend = TRUE) +
geom_point(aes(y = P_A), color = "red", size = 2, show.legend = FALSE) +
geom_line(aes(y = Q_A * 10, color = "Product A Demand (scaled)"), size = 1, show.legend = TRUE) +
geom_point(aes(y = Q_A * 10), color = "darkred", size = 2, show.legend = FALSE) +
scale_color_manual(values = c("Product A Price" = "red", "Product A Demand (scaled)" = "darkred")) +
scale_y_continuous(name = "Price", sec.axis = sec_axis(~./10, name = "Demand (scaled)", labels = scales::number_format(scale = 0.1))) +
labs(title = "Product A Price and Demand Over the Years",
x = "Date",
y = "Price and Demand") +
theme_minimal() +
theme(panel.grid.major = element_line(color = "lightgray", linetype = "dotted"))
View(monthly_avg_data)
# import libraries
library(dplyr)
library(arules)
library(lubridate)
library(ggplot2)
#####################
## data generation ##
#####################
# Create a sequence of dates for the whole year
dates <- seq(as.Date("2018-01-01"), as.Date(Sys.time()), by = "day")
#### generate transaction data ####
# Define the interval for the random number of transactions per day
min_transactions <- 50  # Minimum number of transactions per day
max_transactions <- 150 # Maximum number of transactions per day
# Generate random number of transactions per day
num_transactions <- sample(min_transactions:max_transactions, length(dates), replace = TRUE)
# generate transaction data
transaction_data <- data.frame(
Date = rep(dates, num_transactions),  # Random transactions per day
Transaction_ID = 1:(sum(num_transactions)),      # Unique transaction IDs
Q_A = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product A (0 to 1)
Q_B = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product B (0 to 1)
Q_C = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product C (0 to 1)
Q_D = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product D (0 to 1)
Q_E = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product E (0 to 1)
Q_F = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product F (0 to 1)
Quarter = quarter(rep(dates, num_transactions)),           # Quarter of the year
DayOfWeek = weekdays(rep(dates, num_transactions))          # Day of the week
)
# Create a basket column based on product frequency in each transaction
transaction_data$Basket <- apply(transaction_data[, c("Q_A", "Q_B", "Q_C", "Q_D", "Q_E", "Q_F")], 1, function(x) {
products <- c(rep("A", x["Q_A"]), rep("B", x["Q_B"]), rep("C", x["Q_C"]), rep("D", x["Q_D"]), rep("E", x["Q_E"]), rep("F", x["Q_F"]))
paste(products, collapse = "")
})
# Remove trailing whitespace from the 'basket' column
transaction_data$Basket <- gsub("\\s", "", transaction_data$Basket)
#### generate price data ####
price_data <- data.frame(
Date = dates,                                                # Dates for the whole year
P_A = sample(8:12, length(dates), replace = TRUE),      # Random prices for Product A (8 to 12)
P_B = sample(18:22, length(dates), replace = TRUE),     # Random prices for Product B (18 to 22)
P_C = sample(13:17, length(dates), replace = TRUE),      # Random prices for Product C (13 to 17)
P_D = sample(9:12, length(dates), replace = TRUE),      # Random prices for Product A (9 to 12)
P_E = sample(15:16, length(dates), replace = TRUE),     # Random prices for Product B (15 to 16)
P_F = sample(11:13, length(dates), replace = TRUE),      # Random prices for Product C (11 to 13)
Quarter = quarter(dates),                                    # Quarter of the year
DayOfWeek = weekdays(dates)                                  # Day of the week
)
# Add the total amount spent to the transaction data
merged_data <- merge(transaction_data, price_data, by = "Date", all.x = TRUE)
merged_data$TotalAmountSpent <- (merged_data$Q_A * merged_data$P_A) +
(merged_data$Q_B * merged_data$P_B) +
(merged_data$Q_C * merged_data$P_C) +
(merged_data$Q_D * merged_data$P_D) +
(merged_data$Q_E * merged_data$P_E) +
(merged_data$Q_F * merged_data$P_F)
transaction_data$TotalAmountSpent <- merged_data$TotalAmountSpent
# Add the total demand per product per day to the price data
sales_per_day <- aggregate(cbind(Q_A, Q_B, Q_C, Q_D, Q_E, Q_F) ~ Date, data = transaction_data, sum)
price_data <- merge(price_data, sales_per_day, by = "Date", all.x = TRUE)
price_data <- price_data %>% select(Date, DayOfWeek, Quarter, P_A, Q_A, P_B, Q_B, P_C, Q_C, P_D, Q_D, P_E, Q_E, P_F, Q_F)
# remove sales_per_day and merged_data
rm(sales_per_day, merged_data)
View(transaction_data)
View(transaction_data)
View(price_data)
View(transaction_data)
# import libraries
library(dplyr)
library(arules)
library(lubridate)
library(ggplot2)
#####################
## data generation ##
#####################
# Create a sequence of dates for the whole year
dates <- seq(as.Date("2018-01-01"), as.Date(Sys.time()), by = "day")
#### generate transaction data ####
# Define the interval for the random number of transactions per day
min_transactions <- 50  # Minimum number of transactions per day
max_transactions <- 150 # Maximum number of transactions per day
# Generate random number of transactions per day
num_transactions <- sample(min_transactions:max_transactions, length(dates), replace = TRUE)
# generate transaction data
transaction_data <- data.frame(
Date = rep(dates, num_transactions),  # Random transactions per day
Transaction_ID = 1:(sum(num_transactions)),      # Unique transaction IDs
Q_A = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product A (0 to 1)
Q_B = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product B (0 to 1)
Q_C = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product C (0 to 1)
Q_D = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product D (0 to 1)
Q_E = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product E (0 to 1)
Q_F = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product F (0 to 1)
Quarter = quarter(rep(dates, num_transactions)),           # Quarter of the year
DayOfWeek = weekdays(rep(dates, num_transactions))          # Day of the week
)
# Create a basket column based on product frequency in each transaction
transaction_data$Basket <- apply(transaction_data[, c("Q_A", "Q_B", "Q_C", "Q_D", "Q_E", "Q_F")], 1, function(x) {
products <- c(rep("A", x["Q_A"]), rep("B", x["Q_B"]), rep("C", x["Q_C"]), rep("D", x["Q_D"]), rep("E", x["Q_E"]), rep("F", x["Q_F"]))
paste(products, collapse = "")
})
# Remove trailing whitespace from the 'basket' column
transaction_data$Basket <- gsub("\\s", "", transaction_data$Basket)
#### generate price data ####
price_data <- data.frame(
Date = dates,                                                # Dates for the whole year
P_A = sample(8:12, length(dates), replace = TRUE),      # Random prices for Product A (8 to 12)
P_B = sample(18:22, length(dates), replace = TRUE),     # Random prices for Product B (18 to 22)
P_C = sample(13:17, length(dates), replace = TRUE),      # Random prices for Product C (13 to 17)
P_D = sample(9:12, length(dates), replace = TRUE),      # Random prices for Product A (9 to 12)
P_E = sample(15:16, length(dates), replace = TRUE),     # Random prices for Product B (15 to 16)
P_F = sample(11:13, length(dates), replace = TRUE),      # Random prices for Product C (11 to 13)
Quarter = quarter(dates),                                    # Quarter of the year
DayOfWeek = weekdays(dates)                                  # Day of the week
)
# Add the total amount spent to the transaction data
merged_data <- merge(transaction_data, price_data, by = "Date", all.x = TRUE)
merged_data$TotalAmountSpent <- (merged_data$Q_A * merged_data$P_A) +
(merged_data$Q_B * merged_data$P_B) +
(merged_data$Q_C * merged_data$P_C) +
(merged_data$Q_D * merged_data$P_D) +
(merged_data$Q_E * merged_data$P_E) +
(merged_data$Q_F * merged_data$P_F)
transaction_data$TotalAmountSpent <- merged_data$TotalAmountSpent
# Add the total demand per product per day to the price data
sales_per_day <- aggregate(cbind(Q_A, Q_B, Q_C, Q_D, Q_E, Q_F) ~ Date, data = transaction_data, sum)
price_data <- merge(price_data, sales_per_day, by = "Date", all.x = TRUE)
price_data <- price_data %>% select(Date, DayOfWeek, Quarter, P_A, Q_A, P_B, Q_B, P_C, Q_C, P_D, Q_D, P_E, Q_E, P_F, Q_F)
# remove sales_per_day and merged_data
rm(sales_per_day, merged_data)
View(price_data)
############################
## descriptive statistics ##
############################
as.data.frame(table(transaction_data$Date))
View(transaction_data)
View(transaction_data)
# Assuming transaction_data$Basket contains the basket information
baskets <- strsplit(as.character(transaction_data$Basket), "")
# Convert the baskets into a transaction object
transactions <- as(baskets, "transactions")
View(baskets)
View(transaction_data)
View(baskets)
View(transactions)
summary(trans)
# import libraries
library(dplyr)
library(arules)
library(lubridate)
library(ggplot2)
#####################
## data generation ##
#####################
# Create a sequence of dates for the whole year
dates <- seq(as.Date("2018-01-01"), as.Date(Sys.time()), by = "day")
#### generate transaction data ####
# Define the interval for the random number of transactions per day
min_transactions <- 50  # Minimum number of transactions per day
max_transactions <- 150 # Maximum number of transactions per day
# Generate random number of transactions per day
num_transactions <- sample(min_transactions:max_transactions, length(dates), replace = TRUE)
# generate transaction data
transaction_data <- data.frame(
Date = rep(dates, num_transactions),  # Random transactions per day
Transaction_ID = 1:(sum(num_transactions)),      # Unique transaction IDs
Q_A = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product A (0 to 1)
Q_B = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product B (0 to 1)
Q_C = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product C (0 to 1)
Q_D = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product D (0 to 1)
Q_E = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product E (0 to 1)
Q_F = sample(0:1, sum(num_transactions), replace = TRUE),  # Random quantities of Product F (0 to 1)
Quarter = quarter(rep(dates, num_transactions)),           # Quarter of the year
DayOfWeek = weekdays(rep(dates, num_transactions))          # Day of the week
)
# Create a basket column based on product frequency in each transaction
transaction_data$Basket <- apply(transaction_data[, c("Q_A", "Q_B", "Q_C", "Q_D", "Q_E", "Q_F")], 1, function(x) {
products <- c(rep("A", x["Q_A"]), rep("B", x["Q_B"]), rep("C", x["Q_C"]), rep("D", x["Q_D"]), rep("E", x["Q_E"]), rep("F", x["Q_F"]))
paste(products, collapse = "")
})
# Remove trailing whitespace from the 'basket' column
transaction_data$Basket <- gsub("\\s", "", transaction_data$Basket)
#### generate price data ####
price_data <- data.frame(
Date = dates,                                                # Dates for the whole year
P_A = sample(8:12, length(dates), replace = TRUE),      # Random prices for Product A (8 to 12)
P_B = sample(18:22, length(dates), replace = TRUE),     # Random prices for Product B (18 to 22)
P_C = sample(13:17, length(dates), replace = TRUE),      # Random prices for Product C (13 to 17)
P_D = sample(9:12, length(dates), replace = TRUE),      # Random prices for Product A (9 to 12)
P_E = sample(15:16, length(dates), replace = TRUE),     # Random prices for Product B (15 to 16)
P_F = sample(11:13, length(dates), replace = TRUE),      # Random prices for Product C (11 to 13)
Quarter = quarter(dates),                                    # Quarter of the year
DayOfWeek = weekdays(dates)                                  # Day of the week
)
# Add the total amount spent to the transaction data
merged_data <- merge(transaction_data, price_data, by = "Date", all.x = TRUE)
merged_data$TotalAmountSpent <- (merged_data$Q_A * merged_data$P_A) +
(merged_data$Q_B * merged_data$P_B) +
(merged_data$Q_C * merged_data$P_C) +
(merged_data$Q_D * merged_data$P_D) +
(merged_data$Q_E * merged_data$P_E) +
(merged_data$Q_F * merged_data$P_F)
transaction_data$TotalAmountSpent <- merged_data$TotalAmountSpent
# Add the total demand per product per day to the price data
sales_per_day <- aggregate(cbind(Q_A, Q_B, Q_C, Q_D, Q_E, Q_F) ~ Date, data = transaction_data, sum)
price_data <- merge(price_data, sales_per_day, by = "Date", all.x = TRUE)
price_data <- price_data %>% select(Date, DayOfWeek, Quarter, P_A, Q_A, P_B, Q_B, P_C, Q_C, P_D, Q_D, P_E, Q_E, P_F, Q_F)
# remove sales_per_day and merged_data
rm(sales_per_day, merged_data)
######################
##     apriori      ##
######################
# Turn basket column into a list
baskets <- strsplit(as.character(transaction_data$Basket), "")
# Convert the baskets into a transaction object, which is required for apriori
trans <- as(baskets, "transactions")
summary(trans)
itemFrequencyPlot(trans, topN = 10)
itemFrequencyPlot(trans, topN = 5)
summary(trans)
itemFrequencyPlot(trans, topN = 6)
summary(trans)
itemFrequencyPlot(trans, topN = 6)
# Generate a random integer within the specified interval
randomNumber <- sample(minValue:maxValue, 1)
# Generate a random integer within the specified interval
randomNumber <- sample(minValue:maxValue, 1)
# Example of generating association rules
rules <- apriori(trans, parameter = list(support = 0.1, confidence = 0.5, minlen = 2))
View(rules)
summary(rules)
sorted_rules <- sort(rules, by = "confidence", decreasing = TRUE)
View(sorted_rules)
# Visualize top N rules
plot(sorted_rules, method = "graph", control = list(type = "items"))
# Visualize top N rules
plot(sorted_rules, method = "graph", control = list(type = "items"))
# import libraries
install.packages("arulesViz")
library(arulesViz)
# Visualize top N rules
plot(sorted_rules, method = "graph", control = list(type = "items"))
# Extract the lhs (antecedent) and rhs (consequent) of each rule
lhs <- labels(lhs(rules))
rhs <- labels(rhs(rules))
# Create a dataframe with lhs and rhs components
itemsets_df <- data.frame(
Antecedent = sapply(lhs, function(x) paste(x, collapse = ", ")),
Consequent = sapply(rhs, function(x) paste(x, collapse = ", ")),
Support = support(rules),
Confidence = confidence(rules),
Lift = lift(rules)
)
itemsets_df <- as(rules, "data.frame")
View(itemsets_df)
print(items_df)
print(itemsets_df)
